RaspberryPi's GPIO Programming with Go

Kanstantsin Shamko
Erlang developer

* Agenda 
- What is RaspberryPi
- BCM chip & peripherals, GPIO
- Memory management
- System calls, mmap
- How to use it with Golang

* What is Raspberry Pi
- small single-board computer
.image img/rsp.png _ 500

* Why It's Awesome
.image img/GPIO_pins_v2.png _ 400
- GPIO is a peripheral

* Periphials:
- External devices connected to a CPU
- CPU communicates with a device with IO operations. 
- The most common form of IO is so called memory mapped IO
- Communication via bus
.image img/system_bus.png _ 400

* Example
- turn on a motor
- mov #f2 1
  ....
- mov #01 1
- bus wire 0: 0, bus wire 1: 1
- data bus: 1

* Example (continue)
.image img/example.png _ 500

* Memory Management

* BCM2837
- System-on-a-chip (SoC)
- Includes:
1. CPU (1.2GHz 64bit 4-cores ARMv8 Cortex-A53)
2. GPU (1080p)
3. MMU (memory management unit)
4. ...

* ARM CPU Onboard
.image img/arm.png _ 500

* Why Do We  Need 2 MMUs?
.image img/mem_mmu.png 

* Physical Address
Points to the actual physical location in memory

* Virtual Address
- processes run by OS see virtual addresses
- virtual address space is contigouos, but underlying physical memory is fragmented
- way how OS could hide resources of one process from another

* Bus Address
- is for address bus
- wires connecting CPU, periphials, memory
- level on these wires could be interpreted as an address

* Example (extended)
- turn on a motor
- mov #f2 1
- ARM MMU #f2 -> #e2
- mov #e2 1
- BCM MMU #e2 -> #01
- mov #01 1
- bus wire 0: 0, bus wire 1: 1
- data bus: 1

* BCM2837 Spec. Some Rules
- The peripheral addresses specified in the documentation are bus addresses
- Addres mapping rules: bus 0x7Ennnnnn -> virt (kernel space) 0xF2nnnnnn -> phys 0x3Fnnnnnn
- The bus addresses for peripherals are starting at 0x7E000000.
- In your app use physical or virtual addresses

* GPIO

* Overview
- 54 general-purpose I\O (GPIO) lines split into 2 banks
- All GPIO pins have at least two alternative (input/output)
- The GPIO has 41 registers. All accesses are assumed to be 32-bit
.image img/GPIO_pins_v2.png _ 400

* GPIO Modes
- input - possible to detect pin state 
- output - set pin level to 1
- alt functions (up to 6)
- could be set by GPFSELn function

* GPIO Set Mode
To set *ALT3* mode for pin19 we need:
1. Generate a command which will be: *00* *111* *000* *000* *000* *000* *000* *000* *000* *000* *000*
2. Take bus address of *0x7E200004* and calculate physical address which is *0x3F200004*
3. Write command to memory cell with calculated physical address
.image img/gpsel.png _ 500
.image img/fsel.png  _ 500


* Golang Implementation

* MMAP System Call
- system call - the programmatic way in which a computer program requests a service from the kernel of the operating system it is executed on. System calls are generally not invoked directly, but rather via wrapper functions in glibc
- mmap() call - map files or devices into memory. Creates a new mapping in the virtual address space of the calling process
- syscall.Mmap(fd int, offset int64, length int, prot int, flags int) (data []byte, err error)
- */dev/mem* is a character device file that is an image of the main memory of the computer. Byte addresses in /dev/mem are interpreted as physical memory addresses.

* Code Sample: Load mmap file
.code code/sample.go /^func loadMmaped/,/^}/

* Code Sample: Make a command
.code code/sample.go /^func toPointer/,/^}/
.code code/sample.go /^func writeCommand/,/^}/

* Links
- https://developer.arm.com/architectures/learn-the-architecture/memory-management/the-memory-management-unit-mmu
- https://elinux.org/RPi_Hardware
- http://man7.org/linux/man-pages/man2/syscalls.2.html
- http://man7.org/linux/man-pages/man2/mmap.2.html
- http://man7.org/linux/man-pages/man4/mem.4.html
- https://blog.gopheracademy.com/advent-2017/unsafe-pointer-and-system-calls/
- http://www.linux-databook.info/?page_id=5108
- https://github.com/kshamko/gopherberry