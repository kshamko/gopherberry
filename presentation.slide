RaspberryPi's GPIO Programming with Go

Kanstantsin Shamko
Erlang developer at [[https://www.idt.net/][IDT]]

* Agenda 
- What is ARM\RISC\RaspberryPi
- BCM chip & peripherals, GPIO
- Memory management & CPU
- System calls, mmap
- How to use it with Golang

* What is Raspberry Pi

* Overview
- small single-board computer
- works under control of BCM2837 chip
.image img/rsp.png _ 500

* BCM2837
- System-on-a-chip (SoC)
- Includes:
1. CPU (1.2GHz 64bit 4-cores ARMv8 Cortex-A53)
2. GPU (1080p)
3. Memory 1024Mb
5. MMU (memory management unit)

* ARM CPU
- follows a RISC architecture (Reduced Instruction Set Computer)
- ISA is relatively simple and most instructions execute in one clock cycle
- follows the the explicit load-and-store model, meaning any operation between two data objects in memory require explicitly loading the data from memory to processor registers, performing the operation and explicitly storing the data back into memory

* BCM2837 Peripherals
contains the following peripherals which may safely be accessed by the ARM
- Timers
- Interrupt controller
- USB
- ...
- GPIO

* Peripherals In General
- External devices connected to a CPU
- CPU communicates with a device with IO operations. The most common form of IO is so called memory mapped IO where registers on the device are mapped into memory. This means that to communicate with the device, you need simply read or write to a specific address in memory.
- Communication via bus
.image img/bus.gif _ 400

* Virtual And Physical Addresses

	//Thus a peripheral advertised here at bus address 0x7Ennnnnn is available in the ARM kenel at virtual address 0xF2nnnnnn
	return &Chip{
		BaseAddrPhys: 0x3F000000,
		BaseAddrVirt: 0xF2000000,
	
* GPIO

 - 54 general-purpose I\O (GPIO) lines split into 2 banks
 - All GPIO pins have at least two alternative functions within BCM. The alternate functions are usually peripheral IO and a single peripheral may appear in each bank to allow flexibility on the choice of IO voltage
 - The GPIO peripheral has three dedicated interrupt lines. These lines are triggered by the setting of bits in the event detect status register. Each bank has itsâ€™ own interrupt line with the third line shared between all bit
 -https://bob.cs.sonoma.edu/IntroCompOrg-RPi/sec-gpio-mem.html
 -http://man7.org/linux/man-pages/man2/syscalls.2.html
 -http://man7.org/linux/man-pages/man2/mmap.2.html
 -http://man7.org/linux/man-pages/man4/mem.4.html